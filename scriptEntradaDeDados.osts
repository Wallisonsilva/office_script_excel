{"version":"0.2.0","body":"/**\n * Atualiza a tabela 'tabelaTratativas' no workbook com os dados fornecidos.\n *\n * @param workbook - O workbook que contém a tabela.\n * @param placas - Uma string contendo as placas, separadas por vírgulas ou espaço.\n * @param responsavel - O responsável pela tratativa.\n * @param status - O status da tratativa: \"Agendado\", \"Instalado\" ou \"Cancelado\".\n * @param valor - Valor do serviço, valor padrão R$100,00.\n * @param observacao - Campo observações (opcional).\n */\nfunction main(\n  workbook: ExcelScript.Workbook,\n  placas: string,\n  responsavel: string,\n  status: \"Agendado\" | \"Instalado\" | \"Cancelado\",\n  valor: number = 100,\n  observacoes?: string\n) {\n  // Marca o tempo inicial.\n  const startTime = new Date().getTime();\n\n  // Calcula a data atual no formato do Excel.\n  const formatarDataAtual= 25569.0 + ((startTime - (new Date().getTimezoneOffset() * 60 * 1000)) / (1000 * 60 * 60 * 24));\n\n  // Obtém a aba 'Tratativas' e entra em uma view temporária.\n  const abaTratativas = workbook.getWorksheet(\"Tratativas\");\n  abaTratativas.enterTemporaryNamedSheetView();\n\n  // Obtém a tabela 'tabelaTratativas' e limpa qualquer filtro existente.\n  const tabela = workbook.getTable(\"tabelaTratativas\");\n  tabela.getAutoFilter().clearCriteria();\n\n  // Divide a string 'placas' em um vetor, usando vírgula ou espaço como delimitador.\n  const vetorPlacas = placas.split(',').length > 1 ? placas.split(',') : placas.split(' ');\n\n  // Aplica um filtro à coluna \"Placa\" usando os valores em 'vetorPlacas'.\n  tabela.getColumnByName(\"Placa\").getFilter().applyValuesFilter(vetorPlacas);\n\n  // Verifica o número de linhas visíveis após a filtragem.\n  const qtdeLinhas = tabela.getColumnByName(\"Placa\").getRangeBetweenHeaderAndTotal().getVisibleView().getValues().length;\n\n  // Se houver mais de uma linha visível e o responsável for diferente de vazio, atualiza as colunas.\n  if (qtdeLinhas > 1) {\n    tabela.getColumnByName(\"Responsável\").getRangeBetweenHeaderAndTotal().getVisibleView().getRange().setValues(responsavel);\n    tabela.getColumnByName(\"Status\").getRangeBetweenHeaderAndTotal().getVisibleView().getRange().setValues(status);\n    tabela.getColumnByName(\"Data da Atualização\").getRangeBetweenHeaderAndTotal().getVisibleView().getRange().setValues(formatarDataAtual);\n    tabela.getColumnByName(\"Valor\").getRangeBetweenHeaderAndTotal().getVisibleView().getRange().setValues(valor);\n    if (observacoes) {\n      tabela.getColumnByName(\"Observações\").getRangeBetweenHeaderAndTotal().getVisibleView().getRange().setValues(observacoes);\n    }\n    console.log(`Atualizados ${qtdeLinhas} registros com sucesso.`);\n    } else {\n    console.log(\"Nenhum registro corresponde ao filtro aplicado.\");\n  }\n\n  // Sai da view temporária.\n  abaTratativas.exitActiveNamedSheetView();\n\n  // Calcula e registra o tempo total de execução.\n  const endTime = new Date().getTime();\n  const totalTime = (endTime - startTime) / 1000;\n  console.log(`Tempo total de execução: ${totalTime.toFixed(2)} segundos.`);\n}","description":"Este script atualiza a tabela 'tabelaTratativas' com base em critérios fornecidos. Ao ser executado, ele filtra os registros pela coluna \"Placa\", depois atualiza as colunas \"Status\", \"Data da Atualização\", \"Valor\" e \"Responsável\" para os registros correspondentes. Ao final da execução, ele informa quantos registros foram atualizados e o tempo total de execução.","parameterInfo":"{\"originalParameterOrder\":[{\"name\":\"placas\",\"index\":0},{\"name\":\"responsavel\",\"index\":1},{\"name\":\"status\",\"index\":2},{\"name\":\"valor\",\"index\":3},{\"name\":\"observacoes\",\"index\":4}],\"parameterSchema\":{\"type\":\"object\",\"required\":[\"placas\",\"responsavel\",\"status\",\"valor\"],\"properties\":{\"placas\":{\"type\":\"string\"},\"responsavel\":{\"type\":\"string\"},\"status\":{\"type\":\"string\",\"enum\":[\"Agendado\",\"Instalado\",\"Cancelado\"]},\"valor\":{\"type\":\"number\",\"default\":100},\"observacoes\":{\"type\":\"string\"}}},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}